<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>How to Build Products: From Product Manager to Indiehacker</title>
      <link href="/en//p/build-products-pm-indiehacker/"/>
      <url>/en//p/build-products-pm-indiehacker/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>The author has years of experience as a product manager and is currently exploring the field of indie developers (Indiehacker). The goal is to leverage existing skills and experience while adapting to new challenges, summarizing a methodology for product development as an Indiehacker.</p><h1 id="From-Product-Manager-to-Indiehacker"><a href="#From-Product-Manager-to-Indiehacker" class="headerlink" title="From Product Manager to Indiehacker"></a>From Product Manager to Indiehacker</h1><h2 id="Product-Manager-Perspective"><a href="#Product-Manager-Perspective" class="headerlink" title="Product Manager Perspective"></a>Product Manager Perspective</h2><p>A Product Manager (PM) is a professional responsible for managing the entire product lifecycle, with key responsibilities including:</p><ul><li><strong>Market Research and Demand Analysis</strong>: Understanding market trends and user needs through user interviews, surveys, etc., providing data support for product planning.</li><li><strong>Product Planning and Design</strong>: Based on market research results, creating detailed product plans that include features, interface design, and user experience.</li><li><strong>Project Management and Execution</strong>: Developing project plans, assigning tasks, monitoring progress to ensure timely completion.</li><li><strong>Product Promotion and Operations</strong>: Participating in the formulation of promotion strategies after product launch and collecting user feedback for continuous optimization.</li></ul><h2 id="Indiehacker-Perspective"><a href="#Indiehacker-Perspective" class="headerlink" title="Indiehacker Perspective"></a>Indiehacker Perspective</h2><p>An Indiehacker refers to entrepreneurs who independently develop and operate their projects, typically characterized by the following traits:</p><ul><li><strong>Self-driven</strong>: Indiehackers usually start from scratch, relying on their own resources and abilities for product development.</li><li><strong>Rapid Iteration</strong>: Indiehackers tend to adopt agile development methods, quickly launching a Minimum Viable Product (MVP) and iterating based on user feedback.</li><li><strong>Multiple Roles</strong>: They often need to wear multiple hats, including development, marketing, and customer support.</li><li><strong>Flexibility and Innovation</strong>: Indiehackers can more easily experiment with innovations since they are not constrained by the processes of large organizations and can quickly adjust direction.</li></ul><h2 id="Different-Success-Factors"><a href="#Different-Success-Factors" class="headerlink" title="Different Success Factors"></a>Different Success Factors</h2><p><strong>For Product Managers</strong></p><ul><li><strong>Communication and Coordination Skills</strong>: Ability to effectively coordinate resources across departments to ensure smooth project progress.</li><li><strong>Data Analysis Skills</strong>: Identifying user behavior patterns through data analysis to provide a basis for decision-making.</li><li><strong>Project Management Skills</strong>: Developing reasonable timelines and resource allocation to improve team efficiency.</li></ul><p><strong>For Indiehackers</strong></p><ul><li><strong>Self-learning Ability</strong>: Indiehackers need to continuously learn new technologies and market trends to maintain competitiveness.</li><li><strong>Adaptability</strong>: Ability to quickly adjust strategies in response to market changes and user feedback.</li><li><strong>Innovative Thinking</strong>: Encouraging experimentation with new ideas and seeking unique market entry points.</li></ul><h1 id="How-Product-Managers-Build-Products"><a href="#How-Product-Managers-Build-Products" class="headerlink" title="How Product Managers Build Products"></a>How Product Managers Build Products</h1><p>The core process for product managers in building products is as follows:</p><p><img src="https://github.com/doublemingw/gallery/blob/main/images/%E5%A6%82%E4%BD%95%E6%89%93%E9%80%A0%E4%BA%A7%E5%93%81-%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86-en-wm.png?raw=true" alt="Product Development Process for Product Managers"></p><p>Explanation:</p><ul><li>As part of the organization, product managers focus primarily on creating value (building valuable products with the team), delivering value (proving their worth), and capturing value (promotions, salary increases, etc.).</li><li>Goals: Break down the phased objectives of building products into understanding context &gt;&gt; identifying problems&#x2F;needs &gt;&gt; defining product goals &gt;&gt; deeply understanding needs and scenarios &gt;&gt; designing product solutions &gt;&gt; developing products &gt;&gt; operating products and validating value.</li><li>Product Process: Breakdown of the product development process includes demand insight &gt;&gt; product planning &gt;&gt; product design &gt;&gt; product development implementation &gt;&gt; product operations.<ul><li><strong>Demand Insight</strong>: Systematically collecting and analyzing user feedback and market data to form a deep understanding of user needs.</li><li><strong>Product Planning</strong>: Creating a detailed product roadmap that includes feature priorities, timelines, and resource allocation to guide subsequent development.</li><li><strong>Product Design</strong>: Designing user experience (UX) and user interface (UI) to ensure that the product meets user expectations visually and functionally.</li><li><strong>Product Development Implementation</strong>: Collaborating closely with the development team to ensure that development follows the plan while promptly addressing any issues that arise.</li><li><strong>Product Operations &amp; Value Validation</strong>: After launch, collecting data through market promotion and user feedback to validate whether the product achieves its expected value while continuously optimizing.</li></ul></li></ul><h1 id="How-Indiehackers-Build-Products"><a href="#How-Indiehackers-Build-Products" class="headerlink" title="How Indiehackers Build Products"></a>How Indiehackers Build Products</h1><p><strong>(1) Demand Insight (Identifying Problems and Market Needs)</strong></p><ul><li><strong>Identifying Pain Points</strong>: Observing the surrounding environment to identify specific problems or pain points faced by users. Inspiration can be drawn from personal experiences, social media, or industry forums.</li><li><strong>Market Research</strong>: Conducting preliminary market research to understand potential users’ needs and their willingness to pay. Data can be collected using surveys or interviews.</li></ul><p><strong>(2) Validating Assumptions</strong></p><ul><li><strong>Creating Simple Landing Pages</strong>: Before developing a product, create a landing page describing the product solution to collect potential users’ email addresses or booking information. This helps test market demand.</li><li><strong>Manual Services</strong>: Before building a tech product, consider manually providing services to validate whether the idea is feasible.</li></ul><p><strong>(3) Building Minimum Viable Products (MVP)</strong></p><ul><li><strong>Defining Core Features</strong>: Identify the essential features required for the MVP to effectively solve users’ primary problems. Avoid overdevelopment; keep it simple.</li><li><strong>Using Rapid Prototyping Tools</strong>: Utilize no-code or low-code tools (like Bubble or Webflow) to quickly build an MVP for faster market entry.</li></ul><p><strong>(4) User Feedback &amp; Iteration</strong></p><ul><li><strong>Collecting Feedback</strong>: After releasing the MVP, actively gather user feedback. Communicate with early users to understand their experiences and suggestions for improvement.</li><li><strong>Rapid Iteration</strong>: Make quick iterations based on user feedback to gradually refine the product. Maintain flexibility to adjust direction as needed.</li></ul><p><strong>(5) Marketing &amp; Promotion</strong></p><ul><li><strong>Establishing Brand Image</strong>: Build a personal brand through social media, blogs, and content marketing to attract potential users.</li><li><strong>Utilizing Community Resources</strong>: Participate in relevant communities (like Indie Hackers) for promotion, exchanging experiences with other developers for more exposure opportunities.</li></ul><p><strong>(6) Monitoring &amp; Improvement</strong></p><ul><li><strong>Tracking Key Metrics</strong>: Use analytical tools to monitor product usage and user behavior to understand which features are popular and which need improvement.</li><li><strong>Continuous Optimization</strong>: Constantly optimize the product based on data analysis results to enhance user satisfaction and retention rates.</li></ul><p>Overall, the process for indiehackers in building products is:</p><p><img src="https://raw.githubusercontent.com/doublemingw/gallery/main/images/%E5%A6%82%E4%BD%95%E6%89%93%E9%80%A0%E4%BA%A7%E5%93%81%EF%BC%9Aindiehacker-en-wm.png" alt="Product Development Process for Indiehackers"></p><ul><li>Demand Insight (Identifying Problems &amp; Market Needs) &gt;&gt; Validating Assumptions &gt;&gt; Building MVP &gt;&gt; User Feedback &amp; Iteration &gt;&gt; Marketing &amp; Promotion &gt;&gt; Monitoring &amp; Improvement</li></ul><h1 id="Comparison-of-Product-Development-Processes"><a href="#Comparison-of-Product-Development-Processes" class="headerlink" title="Comparison of Product Development Processes"></a>Comparison of Product Development Processes</h1><h2 id="Similarities-and-Differences"><a href="#Similarities-and-Differences" class="headerlink" title="Similarities and Differences:"></a>Similarities and Differences:</h2><p><strong>Commonalities:</strong> Both emphasize demand insight as a starting point while valuing user feedback and iteration processes.</p><p><strong>Differences:</strong></p><ul><li>Product managers focus more on systematic planning, design, and team collaboration within their processes, while indiehackers emphasize rapid validation of assumptions, building MVPs, and adaptability.</li><li>Product managers operate within organizations with more resources supporting systematic development. In contrast, indiehackers typically work under limited resources relying more on rapid iteration and market feedback.</li></ul><h2 id="Differences-at-Various-Stages"><a href="#Differences-at-Various-Stages" class="headerlink" title="Differences at Various Stages:"></a>Differences at Various Stages:</h2><table><thead><tr><th><strong>Stage</strong></th><th><strong>Product Manager</strong></th><th><strong>Indiehacker</strong></th></tr></thead><tbody><tr><td>Idea Generation</td><td>Relies on team collaboration &amp; market research</td><td>Individual brainstorming &amp; inspiration capture</td></tr><tr><td>Product Definition</td><td>Creates detailed requirement documents &amp; specifications</td><td>Quickly conceptualizes &amp; creates MVP</td></tr><tr><td>Product Design - Prototyping</td><td>Collaborates with designers for high-fidelity prototypes</td><td>Designs simple prototypes independently</td></tr><tr><td>Development Testing</td><td>Conducts comprehensive testing through team collaboration</td><td>Rapid iteration testing by individuals or small teams</td></tr><tr><td>Operations Promotion</td><td>Develops systematic marketing strategies</td><td>Self-promotes through social media channels</td></tr><tr><td>User Feedback</td><td>Collects data for analysis &amp; optimization</td><td>Directly communicates with users for feedback &amp; adjustments</td></tr></tbody></table><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>By reviewing experiences as a product manager and outlining methodologies for indiehackers in building products, I have initially grasped the methods required for transitioning from a product manager to an indiehacker. Whether as a product manager or an indiehacker, understanding user needs deeply is key to success. However, indiehackers need to build Minimum Viable Products (MVPs) faster, iterate quickly, and adapt flexibly to market changes—this demands a more comprehensive skill set.</p><p>In the future, I will base my practical product practices on this initial understanding system and methodology while continuously refining my approach.</p>]]></content>
      
      
      <categories>
          
          <category> building products </category>
          
          <category> method </category>
          
      </categories>
      
      
        <tags>
            
            <tag> independent developer </tag>
            
            <tag> Indiehacker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title> Hexo Blog Building: Setting Up a Local Blog, Deploying to GitHub Pages and Cloudflare Pages</title>
      <link href="/en//p/hexo-setup-deploy/"/>
      <url>/en//p/hexo-setup-deploy/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>This article is part of the Hexo Blog Building Guide series V1.0, mainly introducing the process from local construction of Hexo to deployment on GitHub Pages and Cloudflare Pages. For the entire Hexo Blog Building Guide series, please refer to: <a href="https://blog.dmindie.com/en/p/hexo-solution-process-overview/">Hexo Blog Building Guide: Systematic Solutions and Detailed Construction Process</a>.</p><h2 id="Overall-Process"><a href="#Overall-Process" class="headerlink" title="Overall Process"></a>Overall Process</h2><ul><li>The process is as follows:</li></ul><p><img src="https://github.com/doublemingw/gallery/blob/main/images/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%EF%BC%9A%E6%90%AD%E5%BB%BA%E6%9C%AC%E5%9C%B0%E5%8D%9A%E5%AE%A2%E3%80%81%E9%83%A8%E7%BD%B2%E5%88%B0GitHub%20Pages%E5%92%8CCloudflare%20Pages-en-wm.png?raw=true" alt="Hexo Blog Overall Process from Local Setup to Deployment"></p><p>Explanation:</p><ul><li>The entire process involves four stages: preparation, building a local blog, deploying to GitHub Pages, and deploying to Cloudflare Pages; three modules: Hexo Local, GitHub, Cloudflare.</li></ul><h1 id="Preparation-Work"><a href="#Preparation-Work" class="headerlink" title="Preparation Work"></a>Preparation Work</h1><h2 id="Software-Installation"><a href="#Software-Installation" class="headerlink" title="Software Installation"></a>Software Installation</h2><ul><li>Download and install Node.js (<a href="https://nodejs.org/en/">Download from official website</a>)</li><li>Download and install Git (<a href="https://git-scm.com/downloads">Download from official website</a>)</li></ul><h2 id="Account-Registration"><a href="#Account-Registration" class="headerlink" title="Account Registration"></a><strong>Account Registration</strong></h2><ul><li>Register a GitHub account</li><li>Register a Cloudflare account</li></ul><h1 id="Local-Setup-of-Hexo-Blog"><a href="#Local-Setup-of-Hexo-Blog" class="headerlink" title="Local Setup of Hexo Blog"></a>Local Setup of Hexo Blog</h1><h2 id="Initialize-Hexo"><a href="#Initialize-Hexo" class="headerlink" title="Initialize Hexo"></a><strong>Initialize Hexo</strong></h2><ul><li>Objective: Install the Hexo Command Line Interface (CLI)</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>This command installs the Hexo CLI globally, allowing users to use Hexo commands in any directory. The Hexo CLI provides various functions necessary for creating, generating, and deploying blogs.</p><ul><li>Objective: Initialize a new Hexo blog project.</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init myblog</span><br></pre></td></tr></table></figure><p>This command creates a folder named “myblog” in the current directory and generates the basic structure of a new Hexo blog project within it, including necessary files and directories like the _config.yml configuration file and source folder. This step is fundamental for setting up the blog.</p><ul><li>Objective: Enter the newly created blog project directory.</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># For relative path</span></span><br><span class="line"><span class="built_in">cd</span> myblog</span><br><span class="line"><span class="comment"># For absolute path, if myblog folder is located at /home/user</span></span><br><span class="line"><span class="built_in">cd</span> /home/user/myblog</span><br></pre></td></tr></table></figure><p>This command switches the user to the myblog folder for subsequent configuration and management of the project. In this directory, users can execute other Hexo commands to generate and manage blog content.</p><ul><li>Objective: Install required dependencies for the project.</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p>Executing this command in the myblog directory will download and install all necessary dependencies based on the list in package.json. These dependencies usually include the core Hexo library and its plugins, ensuring that the blog can run and generate correctly.</p><h3 id="Basic-Configuration"><a href="#Basic-Configuration" class="headerlink" title="Basic Configuration"></a>Basic Configuration</h3><ul><li>Configure website site information</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Damon</span> <span class="string">IndieHacker</span> <span class="comment"># </span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">Damon&#x27;s</span> <span class="string">Indie</span> <span class="string">Hacker</span> <span class="string">Journey</span>  </span><br><span class="line"><span class="attr">description:</span> <span class="string">&quot;Welcome to Damon&#x27;s journey as an indie hacker, exploring digital nomad life, independent entrepreneurship, product development, and financial investment.&quot;</span>  </span><br><span class="line"><span class="attr">keywords:</span> <span class="string">&#x27;digital nomad,indie hacker,independent entrepreneurship,product development,investment, &#x27;</span> </span><br><span class="line"><span class="attr">author:</span> <span class="string">Damon</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">en</span>  <span class="comment"># Default language</span></span><br></pre></td></tr></table></figure><h2 id="Local-Preview"><a href="#Local-Preview" class="headerlink" title="Local Preview"></a><strong>Local Preview</strong></h2><ul><li>Execute the following command to start a local server and access it at localhost:4000 to preview the Hexo blog for verification.</li></ul><h1 id="Deploying-to-GitHub-Pages"><a href="#Deploying-to-GitHub-Pages" class="headerlink" title="Deploying to GitHub Pages"></a>Deploying to GitHub Pages</h1><h2 id="Create-GitHub-Repository"><a href="#Create-GitHub-Repository" class="headerlink" title="Create GitHub Repository"></a><strong>Create GitHub Repository</strong></h2><ul><li>Repository name format: <code>username.github.io</code>, with the prefix being username.</li><li>Visibility selection: Public.</li></ul><h2 id="Configure-Username-and-Email"><a href="#Configure-Username-and-Email" class="headerlink" title="Configure Username and Email"></a><strong>Configure Username and Email</strong></h2><ul><li><p>Why configure username and email?</p><ul><li>Record commit information: Git records the author’s username and email with each commit. This information is crucial for viewing commit history and helps others understand code provenance and responsibility.</li><li>Permission management: GitHub uses this information to identify committers. If the locally configured email matches that registered with your GitHub account, GitHub will attribute that commit to your corresponding user account, ensuring your contributions are accurately recorded.</li><li>Avoid confusion: If username and email are not configured, Git uses default values (like computer name), which may lead to unclear commit records that are hard to trace.</li></ul></li><li><p>Global configuration：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;Your Default Name&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;default@example.com&quot;</span></span><br></pre></td></tr></table></figure><ul><li>Your Default Name refers to your username.</li><li><a href="mailto:default@example.com">default@example.com</a> refers to your email address.</li></ul></li><li><p>Verify settings:</p><ul><li><p>You can confirm the current repository’s configuration with:</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --list</span><br></pre></td></tr></table></figure></li><li><p>If your configured username and email display correctly, then configuration is successful.</p></li></ul></li></ul><h2 id="Configure-Hexo-Deployment-Settings"><a href="#Configure-Hexo-Deployment-Settings" class="headerlink" title="Configure Hexo Deployment Settings"></a><strong>Configure Hexo Deployment Settings</strong></h2><h3 id="Two-Deployment-Configuration-Methods-SSH-and-HTTPS"><a href="#Two-Deployment-Configuration-Methods-SSH-and-HTTPS" class="headerlink" title="Two Deployment Configuration Methods: SSH and HTTPS"></a>Two Deployment Configuration Methods: <strong>SSH</strong> and <strong>HTTPS</strong></h3><p>(1) SSH (Secure Shell)</p><ul><li>Features:<ul><li>When using SSH protocol, you need to generate an SSH key pair (public key and private key).</li><li>Add the public key to your GitHub account’s SSH settings for authentication.</li><li>Once configured, pushing code using SSH does not require entering username and password each time.</li></ul></li><li>Advantages:<ul><li>More secure because SSH uses encrypted connections.</li><li>Suitable for users who frequently push code since it eliminates the hassle of entering credentials every time.</li></ul></li></ul><p>(2) HTTPS (Hypertext Transfer Protocol Secure)</p><ul><li>Features:<ul><li>When using HTTPS protocol, each time you push code you need to enter your GitHub account’s username and password (or use a personal access token).</li></ul></li><li>Advantages:<ul><li>Relatively simple configuration without needing to manage SSH keys.</li><li>More convenient for users who do not push code frequently.</li></ul></li></ul><p>(3) Comparison of SSH and HTTPS</p><table><thead><tr><th><strong>Feature&#x2F;Name</strong></th><th><strong>SSH</strong></th><th><strong>HTTPS</strong></th></tr></thead><tbody><tr><td>Security</td><td>High (encrypted connection)</td><td>Medium (depends on password or token)</td></tr><tr><td>Configuration Complexity</td><td>Higher (requires key generation and management)</td><td>Lower (directly uses username and password)</td></tr><tr><td>Push Convenience</td><td>High (no need to enter credentials each time)</td><td>Lower (credentials needed each time)</td></tr></tbody></table><p>Choosing which method depends on your needs. If you frequently update your blog and want a simplified process, using SSH is recommended; if you update occasionally and prefer not managing keys, HTTPS may be more suitable. Since I frequently update my blog, I opted for SSH; below are specific steps for each method.</p><h3 id="SSH-Configuration-Steps"><a href="#SSH-Configuration-Steps" class="headerlink" title="SSH Configuration Steps"></a><strong>SSH Configuration Steps</strong></h3><p><strong>(1) Preparation — Generate SSH Key</strong></p><p>First, generate an SSH key pair (public key and private key) on your local machine.</p><ul><li><p><strong>Open Terminal</strong>:</p><ul><li>On Windows, use Git Bash or Windows Terminal.</li><li>On macOS or Linux, open Terminal directly.</li><li>This article is based on macOS operations.</li></ul></li><li><p><strong>Input command to generate key</strong>:</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot;</span><br></pre></td></tr></table></figure><ul><li><strong><code>t rsa</code></strong>: Specifies RSA as the key type.</li><li><strong><code>b 4096</code></strong>: Specifies a key length of 4096 bits (more secure).</li><li><strong><code>C &quot;your_email@example.com&quot;</code></strong>: Adds a comment to the key; typically your email.</li></ul></li><li><p><strong>Follow prompts</strong>:</p><ul><li>The system will prompt you to choose a save location; default is <strong><code>~/.ssh/id_rsa</code></strong>. If you don’t want to change it, just press Enter.</li><li>Next, it will ask if you want to set a passphrase. You can choose to enter one for added security or just press Enter to skip.</li></ul></li></ul><p><strong>(2) Preparation — Add SSH Public Key to GitHub</strong><br>After generating the key, add the public key to your GitHub account.</p><ul><li><p>Copy public key: Use this command to view and copy public key content:</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure></li><li><p>Go to SSH and GPG keys settings:</p><ul><li>Log into GitHub at <a href="https://github.com/">GitHub</a>.</li><li>Click on your profile picture in the upper right corner then select “Settings”.</li><li>In the left menu find “SSH and GPG keys” and click on it.</li></ul></li><li><p>Add new SSH key:</p><ul><li>Click “New SSH key” button.</li><li>Enter a descriptive name in the “Title” field (e.g., “Myblog SSH Key”).</li><li>Key type defaults to Authentication Key.</li><li>Paste the copied public key content into the “Key” field.</li><li>Click “Add SSH key” button to complete adding.</li></ul></li></ul><p><strong>(3) Preparation — Test SSH Connection</strong></p><p>To ensure your SSH configuration is correct, test your connection with GitHub using:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>If everything is correct, you should see a message similar to:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi username! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure><ul><li>Modify <code>_config.yml</code> file by adding deployment information:</li></ul><p>Open the Hexo project’s <strong><code>_config.yml</code></strong> file, find or add <code>deploy</code> section with:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:username/username.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span> <span class="comment"># or use master depending on your default branch settings</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Replace <strong><code>username</code></strong> with your GitHub username. If using another branch (like <strong><code>master</code></strong>), adjust accordingly in <code>branch</code>.</p><h3 id="HTTPS-Configuration-Steps"><a href="#HTTPS-Configuration-Steps" class="headerlink" title="HTTPS Configuration Steps"></a><strong>HTTPS Configuration Steps</strong></h3><p>Open Hexo project’s <strong><code>_config.yml</code></strong> file, find or add <code>deploy</code> section with:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">&lt;https://github.com/username/username.github.io.git&gt;</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span>  <span class="comment"># or use master depending on your default branch settings</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Replace <strong><code>username</code></strong> with your GitHub username. If using another branch (like <strong><code>master</code></strong>), adjust accordingly in <code>branch</code>. Using this method requires security verification each time you deploy.</p><h2 id="Install-Deployment-Plugin"><a href="#Install-Deployment-Plugin" class="headerlink" title="Install Deployment Plugin"></a><strong>Install Deployment Plugin</strong></h2><p>Install deployment plugin</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h2 id="Execute-Deployment-to-GitHub-Pages"><a href="#Execute-Deployment-to-GitHub-Pages" class="headerlink" title="Execute Deployment to GitHub Pages"></a><strong>Execute Deployment to GitHub Pages</strong></h2><p>Execute deployment</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Option 1:</span></span><br><span class="line">hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Option 2:</span></span><br><span class="line">hexo cl;hexo g;hexo d</span><br></pre></td></tr></table></figure><p>Note: If using HTTPS configuration when prompted for GitHub username and password by the system, enter appropriate information. If two-factor authentication is enabled, use personal access token as password.</p><h2 id="Verify-Deployment"><a href="#Verify-Deployment" class="headerlink" title="Verify Deployment"></a><strong>Verify Deployment</strong></h2><p>After deployment completes, visit <strong><code>https://username.github.io</code></strong> to check if your blog is successfully online.</p><h1 id="Deploying-to-Cloudflare-Pages"><a href="#Deploying-to-Cloudflare-Pages" class="headerlink" title="Deploying to Cloudflare Pages"></a>Deploying to Cloudflare Pages</h1><h2 id="Why-Deploy-Cloudflare-Pages"><a href="#Why-Deploy-Cloudflare-Pages" class="headerlink" title="Why Deploy Cloudflare Pages"></a>Why Deploy Cloudflare Pages</h2><p>The reason for further deploying your Hexo blog from GitHub Pages to Cloudflare Pages mainly lies in aspects such as performance, security, availability, and functionality expansion.</p><table><thead><tr><th><strong>Comparison Item</strong></th><th><strong>Cloudflare Pages</strong></th><th><strong>GitHub Pages</strong></th></tr></thead><tbody><tr><td><strong>Performance</strong></td><td>Global CDN acceleration for fast static resource distribution</td><td>Slower loading speed; initial load may have longer response times</td></tr><tr><td><strong>Caching Strategy</strong></td><td>Flexible caching strategies optimizing resource loading</td><td>Limited caching mechanisms with relatively simple control</td></tr><tr><td><strong>Security</strong></td><td>Strong DDoS protection ensuring stable website operation</td><td>Limited SSL support; challenges configuring SSL on custom domains</td></tr><tr><td><strong>Security Features</strong></td><td>Free SSL&#x2F;TLS certificates ensuring secure data transmission</td><td>Past vulnerabilities related to security</td></tr><tr><td><strong>Automation &amp; CI</strong></td><td>Automatic builds &amp; deployments triggered after each commit</td><td>Longer build times; less efficient during high-frequency updates</td></tr><tr><td><strong>Automation &amp; CI Features</strong></td><td>Preview features facilitating team collaboration &amp; content review</td><td>Lacks flexibility with limited build process control</td></tr><tr><td><strong>Additional Features &amp; Analytics Tools</strong></td><td>Built-in traffic analytics tools for real-time monitoring of website traffic &amp; performance</td><td>Lacks analytics features; relies on third-party services for statistics</td></tr><tr><td><strong>Additional Features &amp; Analytics Tools</strong></td><td>Page rules &amp; traffic management providing granular control</td><td>Limited support for complex configurations</td></tr></tbody></table><h2 id="Steps-for-Deploying-to-Cloudflare-Pages"><a href="#Steps-for-Deploying-to-Cloudflare-Pages" class="headerlink" title="Steps for Deploying to Cloudflare Pages"></a>Steps for Deploying to Cloudflare Pages</h2><p>(1) Click Create Project</p><p>In Cloudflare dashboard find “Pages” section then click “Create a Project”.</p><p>In Create Application-Pages page click Connect to Git.</p><p>image.png</p><p>(2) Authorize Access to GitHub Repository</p><p>Select Import Project from GitHub option and authorize Cloudflare access to your GitHub repository.</p><p>(3) Link Hexo Blog Repository</p><p>Select previously created hexo’s GitHub repository from list (i.e., <strong><code>username.github.io</code></strong>).</p><p>(4) Configure Build Settings:</p><ul><li><strong>Production Branch</strong>: Input <strong><code>main</code></strong> (or other branch you are using)</li><li><strong>Build Command:</strong> Default is empty</li><li><strong>Output Directory:</strong> Default is empty</li></ul><p>(5) Execute Deployment:</p><p>Click “Save and Deploy”.</p><p>(6) Deployment Results:</p><p>Prompted message indicates success! Your project has been deployed globally.</p><h2 id="Verify-Deployment-1"><a href="#Verify-Deployment-1" class="headerlink" title="Verify Deployment"></a>Verify Deployment</h2><p>You can access your blog via domain provided by Cloudflare.</p><p>Verification can also be done by setting <code>username.github.io</code>‘s GitHub repository as Private.</p><h1 id="Daily-Usage"><a href="#Daily-Usage" class="headerlink" title="Daily Usage"></a>Daily Usage</h1><p>Daily usage of hexo includes commands like creating new pages&#x2F;posts, previewing content, deploying etc.:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Create new post</span></span><br><span class="line">hexo new Blog Article Title</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Create new page (standalone page)</span></span><br><span class="line">hexo new page --path about/me &quot;About&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Or hexo clean clears static webpage cache</span></span><br><span class="line">hexo cl</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Or hexo server runs <span class="built_in">local</span> deployment <span class="built_in">test</span></span></span><br><span class="line">hexo s</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Or hexo generate generates static webpages from <span class="built_in">source</span> files</span></span><br><span class="line">hexo g</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Or hexo deploy pushes published content to GitHub Pages</span></span><br><span class="line">hexo d</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Combined <span class="built_in">command</span> <span class="keyword">for</span> quick <span class="built_in">local</span> preview</span></span><br><span class="line">hexo cl;hexo s</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Combined <span class="built_in">command</span> <span class="keyword">for</span> quick deployment;</span></span><br><span class="line">hexo cl;hexo g;hexo d</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>For more details refer to <a href="https://hexo.io/zh-cn/docs/commands">Hexo Documentation Commands</a>.</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>Although it seems complex at first glance, actual operation goes smoothly. Ultimately you can set up and deploy your own Hexo blog.</p><p>Future updates will continue covering topics related to Hexo blogging including domain resolution for Hexo blogs, syncing content between Hexo and Notion, theme configurations for Hexo blogs, multilingual switching etc. Please stay tuned for our series on building Hexo blogs: <a href="https://blog.dmindie.com/p/hexo-solution-process-overview/">Hexo Blog Building Guide: Systematic Solutions and Detailed Construction Process</a>.</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul><li><a href="https://hexo.io/en/">hexo.io</a></li><li><a href="https://github.com/hexojs/hexo">GitHub: hexo</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> building products </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> build in public </tag>
            
            <tag> github </tag>
            
            <tag> cloudflare </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo Blog Building Guide: Systematic Solutions and Detailed Construction Process</title>
      <link href="/en//p/hexo-build-solution-process/"/>
      <url>/en//p/hexo-build-solution-process/</url>
      
        <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>In today’s digital age, building an efficient and personalized blog has become a goal for many content creators and developers. This article aims to provide a comprehensive overview of the overall plan for a blog, covering all aspects from content management to online deployment. We will explore in detail how to utilize Notion for content organization, achieve synchronization with Hexo through eLog, and ultimately deploy the blog to GitHub Pages and Cloudflare Pages. Additionally, the article will present a future product roadmap, showcasing the iterative optimization process and feature expansion of the blog.</p><h2 id="Product-Architecture"><a href="#Product-Architecture" class="headerlink" title="Product Architecture"></a>Product Architecture</h2><p><img src="https://raw.githubusercontent.com/doublemingw/gallery/main/images/hexo%E5%8D%9A%E5%AE%A2%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84-en-1-wm.png" alt="Product Architecture"></p><p><strong>Description:</strong></p><ul><li>The overall structure is divided into four levels: Notion Note Level, Hexo Blog Local Management Level, Online Deployment Level, and User Perception Level.</li><li><strong>Notion Note Level:</strong> Utilize Notion’s powerful capabilities to organize and output content.<ul><li>Elog: One-click synchronization of Notion content to the Hexo local blog management.</li></ul></li><li><strong>Hexo Blog Local Management Level:</strong> Manage the blog with custom settings.</li><li><strong>Online Deployment Level:</strong> First deploy the blog to GitHub Pages, then mount it to Cloudflare Pages.</li><li><strong>User Perception Level:</strong> Users access the website address to obtain content.</li><li><strong>Multilingual Management:</strong><ul><li>Two independent Chinese and English blog projects.</li><li>Frontend JavaScript + Cloudflare Worker for language switching.</li></ul></li></ul><h2 id="Product-Roadmap"><a href="#Product-Roadmap" class="headerlink" title="Product Roadmap"></a>Product Roadmap</h2><table><thead><tr><th><strong>Version Number</strong></th><th><strong>Goals</strong></th><th><strong>Related Blog Posts</strong></th></tr></thead><tbody><tr><td>V1.0</td><td>From 0 to 1: Local setup and online deployment</td><td>1.  <a href="https://blog.dmindie.com/en/p/hexo-setup-deploy/">Hexo Blog Building: Setting Up a Local Blog, Deploying to GitHub Pages and Cloudflare Pages</a></td></tr><tr><td>V1.1</td><td>From 0 to 1: Synchronizing Notion content to Hexo blog</td><td>1. Hexo Blog Building: Syncing Notion Content to Hexo Blog via Elog (to be published)</td></tr><tr><td>V1.2</td><td>From 0 to 1: Domain purchase and configuration</td><td>1. Hexo Blog Building: Namecheap Domain Purchase and Cloudflare DNS Configuration Guide (to be published)</td></tr><tr><td>V1.3</td><td>Add support for multilingual switching</td><td>1. Hexo Blog Building: Supporting Multilingual Switching (to be published)</td></tr><tr><td>V1.4</td><td>Add Butterfly theme configuration</td><td>1. Hexo Blog Building: Butterfly Theme Configuration (to be published)</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> building products </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> build in public </tag>
            
            <tag> github </tag>
            
            <tag> cloudflare </tag>
            
            <tag> notion </tag>
            
            <tag> hexo </tag>
            
            <tag> elog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Start my journey as an indie hacker</title>
      <link href="/en//p/start-indie-hacker-journey/"/>
      <url>/en//p/start-indie-hacker-journey/</url>
      
        <content type="html"><![CDATA[<h2 id="What-is-an-Indie-Hacker"><a href="#What-is-an-Indie-Hacker" class="headerlink" title="What is an Indie Hacker?"></a>What is an Indie Hacker?</h2><p>An indie hacker refers to individuals who generate income by building online projects independently. They typically pursue financial independence, creative freedom, and flexible work hours. This group includes not only solo entrepreneurs but also small teams. The indie hacker philosophy embodies independence, self-reliance, and innovation.</p><p>Indie hackers differ significantly from traditional entrepreneurs in several ways:</p><ul><li><strong>Independence</strong>: Indie hackers operate independently, often as solo founders or small teams, taking on multiple roles within their ventures.</li><li><strong>Profit Orientation</strong>: Unlike many startups that prioritize growth over immediate profits, indie hackers aim to establish sustainable businesses from the outset. They often self-fund their projects through personal savings or revenue generated from their products.</li><li><strong>Lean Methodologies</strong>: Indie hackers adopt agile development practices, focusing on creating a Minimum Viable Product (MVP) to quickly iterate based on user feedback.</li><li><strong>Creative Freedom</strong>: This approach allows indie hackers to explore innovative ideas without the constraints imposed by investors or corporate structures. They value maintaining a healthy work-life balance while pursuing projects they are passionate about.</li></ul><p>Indie hackers typically have diverse income streams, including:</p><ul><li><strong>Software as a Service (SaaS)</strong>: Many indie hackers develop and sell SaaS products, often using subscription models to provide ongoing value to users while generating recurring revenue.</li><li><strong>One-time Purchase Products</strong>: Some create products or applications that require a single payment, such as software tools, eBooks, or online courses.</li><li><strong>Consulting and Coaching Services</strong>: Offering expertise through consulting or coaching is another common revenue source.</li><li><strong>Content Creation</strong>: Monetizing blogs, podcasts, eBooks, or online courses is a popular avenue for income.</li><li><strong>Freelancing</strong>: Many indie hackers earn income by providing freelance services on platforms like Upwork while simultaneously developing their products.</li><li><strong>E-commerce</strong>: Selling handmade goods or custom products on platforms like Etsy is also a viable option.</li><li><strong>B2B Products and Services</strong>: Developing solutions for business clients can yield higher revenues.</li><li><strong>Investment Strategies</strong>: Once stable income is achieved through independent ventures, investing can help grow wealth further, leveraging compounding effects for future security and freedom.</li></ul><p>However, being an indie hacker comes with its challenges:</p><ul><li><strong>Facing Uncertainty</strong>: The entrepreneurial journey is inherently uncertain. Indie hackers must navigate market demands and user feedback, where every decision can impact product success. This uncertainty can lead to feelings of confusion and anxiety.</li><li><strong>Identifying Market Needs</strong>: Discovering genuine market demand can be challenging in the early stages of entrepreneurship.</li><li><strong>Delayed Results</strong>: Many indie hackers experience prolonged efforts before seeing significant results. While some may achieve quick profitability, most require extensive trial and error to find their market fit. This lack of immediate feedback can lead to frustration and thoughts of giving up.</li><li><strong>Loneliness</strong>: The life of an indie hacker can be isolating. Despite the presence of supportive online communities like Indie Hackers, many decisions and tasks must be handled solo. This isolation can affect mental health and reduce enthusiasm for work when progress isn’t shared or understood by others.</li><li><strong>Struggling to Persist</strong>: Initial passion may wane in the face of ongoing challenges. Many start with enthusiasm but find it increasingly difficult to maintain that energy over time due to daily obstacles. The solitary nature of the work can exacerbate feelings of loneliness and pressure, leading to anxiety and discouragement.</li></ul><h2 id="Why-Become-an-Indie-Hacker"><a href="#Why-Become-an-Indie-Hacker" class="headerlink" title="Why Become an Indie Hacker?"></a>Why Become an Indie Hacker?</h2><h3 id="Changes-in-External-Environment"><a href="#Changes-in-External-Environment" class="headerlink" title="Changes in External Environment"></a>Changes in External Environment</h3><ul><li><strong>Opportunities in the AI Era</strong>: The rapid advancement of artificial intelligence presents numerous entrepreneurial opportunities comparable to those during the internet boom. AI enhances productivity and provides entrepreneurs with more tools and resources, making it easier and more efficient to start businesses.</li><li><strong>Empowerment of Individuals</strong>: AI technology enables ordinary individuals or small teams to accomplish tasks that previously required extensive expertise. This empowerment allows even those without programming skills to quickly build products, lowering barriers to entry.</li><li><strong>Economic Challenges</strong>: In a declining economic environment, there’s a need to look beyond local opportunities and seek global prospects. The indie hacker model effectively facilitates earning income through lightweight online businesses.</li></ul><h3 id="Personal-Background-and-Motivation"><a href="#Personal-Background-and-Motivation" class="headerlink" title="Personal Background and Motivation"></a>Personal Background and Motivation</h3><ul><li><strong>Personal Experience</strong>: As a former internet product manager with a solid foundation in product methodologies and extensive experience in e-commerce and financial payments, I have built a strong base for becoming a successful indie hacker.</li><li><strong>Personality Traits</strong>: A strong sense of self-motivation and resilience drives my efforts.</li><li><strong>Career Aspirations</strong>: I have long desired to independently pursue “small yet beautiful” projects and take charge of my career path.</li></ul><p>In summary, the independent and lightweight online business model of being an indie hacker offers valuable opportunities for anyone looking to own their venture. I am committed to seizing the opportunities presented by this era to realize my dreams 💪🏻💪🏻.</p><h2 id="How-to-Become-an-Indie-Hacker"><a href="#How-to-Become-an-Indie-Hacker" class="headerlink" title="How to Become an Indie Hacker"></a>How to Become an Indie Hacker</h2><p>Recognizing my limited understanding of indie hacking in the fast-evolving internet and AI landscape, I realize that immediate action is crucial. I need to quickly build my Minimum Viable Product (MVP), even if it starts as a “rough” version. Through practice, I can continuously optimize it. Thus, I have identified my first steps on this journey:</p><p><strong>Goals:</strong></p><ul><li>Increase knowledge through extensive input</li><li>Rapidly launch my MVP<ul><li>The MVP will be a personal blog reflecting my understanding</li></ul></li><li>Build a personal brand</li></ul><p><strong>Scope:</strong></p><ul><li>Extensive Input: By consuming content related to indie hacking—such as successful case studies, relevant forums, successful projects&#x2F;products, and online marketing strategies—I aim to broaden my overall understanding.</li><li>Build a Personal Blog: This will serve two purposes—documenting my knowledge system in the indie hacker domain while simultaneously constructing my blog’s MVP in preparation for future monetization via Google Ads.</li><li>Develop Personal Media Presence: Engaging in self-media is crucial for marketing as an indie hacker; it helps expand influence and gather user feedback.</li></ul>]]></content>
      
      
      <categories>
          
          <category> indiehacker </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
